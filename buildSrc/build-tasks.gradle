
task readTestConfiguration (){
	 apply from: 'deployment/config/configuration-test.gradle'
}

task readProductiveConfiguration (){
}

task provisionServers (){
}

task restartServices (){
}

// 'выполнить развертывание компонентов системы с учетом данных из ранее прочитанныъ конфигурационных файлов'
task integrationTest () {
}


task 'deploy' {
    dependsOn ':provisionServers', ':restartServices'
}

//

// "выполнить развертывание в тестовой среде"
task deployTest () {
}

// "выполнить развертывание в продуктивной среде"
task deployProductive () {
    dependsOn ':readProductiveConfiguration', ':deploy'
}


// "тестирование на сервер CI"
task ciTest () {
    dependsOn ':deployTest', ':integrationTest'
}

// "выполнить развертывание в продуктивной среде"
task ciDeploy {
}

/*
def loadProjectProperties(Project prj) {
	Properties props = new Properties()
	if (new File("${prj.projectDir}/project.properties").exists()) {
		props.load(new FileInputStream("${prj.projectDir}/project.properties"))
	}
	return  props;
}
*/


// create per project files
allprojects {
	def prj = it
	// don't create these tasks for non-java projects (for this time)
	if (!prj.ext.has("isJavaProject") ) return;

	task gitByTagVersion(type:Exec)  {
		// def props = loadProjectProperties(prj)
		description "Create tag in local git by version in file"
		workingDir prj.projectDir
		//on linux
		commandLine "git",  "tag", "${prj.version}", "--message=Gradle Release at ${new Date()}"
	}

	// execute only in execution phase
	gitByTagVersion.doFirst {
		if(prj.version.endsWith('-SNAPSHOT')) {
			def msg = "Cannot create release with version: ${prj.version}"
			logger.error(msg)
			throw new IllegalStateException(msg)
		}
  	}

	task gitPush(type:Exec) {
		description "Push tag in remote storage"
  		workingDir prj.projectDir
  		//on linux
  		commandLine "git",  "push" , "origin", "--tags"
  	}

	// **** uploading
	// upload to nexus/artifactory
	apply plugin: 'maven-publish'
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
				groupId 'ru.nlp_project.story_line2'
            	artifactId artifactId
				version prj.version
	            from components.java
	        }
	    }
		repositories {
	        maven {
	            credentials {
	                username "deployment"
					password "deployment"
	            }
	            if(project.version.endsWith('-SNAPSHOT')) {
	                url "http://192.168.1.99:8082/nexus/content/repositories/snapshots/"
	            } else {
	                url "http://192.168.1.99:8082/nexus/content/repositories/releases/"
	            }
	        }
	    }
	}

	publishToMavenLocal.dependsOn build
	task install (dependsOn: publishToMavenLocal) {
		description "Install in local repo"
	}

	task deploy (dependsOn: publish) {
		description "Install in remote repo"
	}


	gitByTagVersion.dependsOn build
	gitPush.dependsOn gitByTagVersion
	task release (dependsOn: [gitPush, publish]) {
		description "Make release of module (assign tag, push tag to git, publish)"
	}


}
