
task readTestConfiguration (){
	 apply from: 'deployment/config/configuration-test.gradle'
}

task readProductiveConfiguration (){
}

task provisionServers (){
}

task restartServices (){
}

// 'выполнить развертывание компонентов системы с учетом данных из ранее прочитанныъ конфигурационных файлов'
task integrationTest () {
}


task 'deploy' {
    dependsOn ':provisionServers', ':restartServices'
}

//

// "выполнить развертывание в тестовой среде"
task deployTest () {
}

// "выполнить развертывание в продуктивной среде"
task deployProductive () {
    dependsOn ':readProductiveConfiguration', ':deploy'
}


// "тестирование на сервер CI"
task ciTest () {
    dependsOn ':deployTest', ':integrationTest'
}

// "выполнить развертывание в продуктивной среде"
task ciDeploy {
}

/*
def loadProjectProperties(Project prj) {
	Properties props = new Properties()
	if (new File("${prj.projectDir}/project.properties").exists()) {
		props.load(new FileInputStream("${prj.projectDir}/project.properties"))
	}
	return  props;
}
*/


// create per project files
allprojects {
	def prj = it

	task gitByTagVersion(type:Exec) {
		// def props = loadProjectProperties(prj)
		description "Create tag in local git by version in file"
  		workingDir prj.projectDir
  		//on linux
  		commandLine "git",  "tag", "${version}", "--message=Gradle Release at ${new Date()}"
  	}

	task gitPushTag(type:Exec, dependsOn: gitByTagVersion) {
		description "Push tag in remote storage"
  		workingDir prj.projectDir
  		//on linux
  		commandLine "git",  "push" , "origin", "--tags"
  	}
	task release {
		dependsOn gitByTagVersion, gitPushTag
		description "Make release of module"
	}

	// **** uploading
	// upload to nexus/artifactory
	apply plugin: 'maven-publish'
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
				groupId project.groupId
            	artifactId "${artifactId}"
            	version "${version}"
	            from components.java
	        }
	    }
		repositories {
	        maven {
			/*
	            credentials {
	                username "anonymous"
	            }
				*/
	            if(project.version.endsWith('-SNAPSHOT')) {
	                url "file://tmp/libs-snapshot-local"
	            } else {
	                url "file://tmp/libs-release-local"
	            }
	        }
	    }
	}

}
