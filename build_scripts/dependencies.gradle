// project dependencies
ext {
VELOCITY_VER='1.7'
JACKSON_VER='2.8.6'
COMMONS_IO_VER='2.4'
DROPWIZARD_CORE_VER='1.0.5'
DROPWIZARD_METRICS_VER='3.2.0'
DROPWIZARD_METRICS_INFLUXDB_VER='0.9.3'
JERSEY_VER='2.25.1'
GRIZZLY_VER='2.3.28'
JSOUP_VER='1.10.2'
JODATIME_VER='2.9.7'
ELASTICSEARCH_CLIENT_TRANSPORT_VER='5.1.1'
MONGO_JAVA_DRIVER_VER='3.3.0'
DAGGER_VER='2.8'
CRAWLER4J_VER='4.2'
GROOVY_VER='2.4.7'
// my
STORY_LINE2_GLR_PARSER_VER='0.5-SNAPSHOT'
STORY_LINE2_CONFIG_VER='0.2'
STORY_LINE2_MORPH_VER='0.2'
STORY_LINE2_TOKEN_VER='0.1'
// test
TEST_JUNIT_VER='4.12'
TEST_MOCKITO_VER='2.7.9'
TEST_ASSERTJ_VER='3.6.2'
}

project(':config') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
        compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VER}"
		compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${JACKSON_VER}"
    }
}

project(':server_web') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	apply plugin: "net.ltgt.apt"

	dependencies {
		// only temporary for 'JacksonRequestExecutorImpl'
		compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VER}"
		// netty
		compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:${JERSEY_VER}"
		// compile "org.glassfish.jersey.media:jersey-media-json-jackson:${JERSEY_VER}"
		compile "org.glassfish.grizzly:grizzly-http-server:${GRIZZLY_VER}"
		compile "ru.nlp_project.story_line2:config:${STORY_LINE2_CONFIG_VER}"
		compile ('org.apache.storm:storm-core:1.0.2') {
		// log4j-slf4j-impl-2.1
		exclude module: 'log4j-slf4j-impl'
		}
		// Dagger dependencies
		// compile "com.google.dagger:dagger:${DAGGER_VER}"
		// Dagger dependencies
		// apt "com.google.dagger:dagger-compiler:${DAGGER_VER}"
	}

	apply plugin: 'com.github.johnrengelman.shadow'

	// Include dependent libraries in archive.
	def mainClassName = "ru.nlp_project.story_line2.server_web.Application"

	shadowJar {
		mergeServiceFiles()
	  	manifest {
			attributes 'Description': 'This is an application JAR'
	    	attributes "Main-Class": "$mainClassName"
	 	}
	}

	build.dependsOn('shadowJar')

	apply plugin: 'maven-publish'
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
				groupId 'ru.nlp_project.story_line2'
	           	artifactId artifactId
				version it.version
	            from components.shadow
	        }
	    }
		repositories {
	        maven {
	            credentials {
	                username "deployment"
					password "deployment"
	            }
	            if(project.version.endsWith('-SNAPSHOT')) {
					// publish only RELEASES
					// url "http://repo.nlp-project.ru:8082/nexus/content/repositories/snapshots/"
	            } else {
	                url "http://repo.nlp-project.ru:8082/nexus/content/repositories/releases/"
	            }
	        }
	    }
	} // publishing
}

project(':server_storm') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	apply plugin: "net.ltgt.apt"
	dependencies {
		compile ('org.apache.storm:storm-core:1.0.3') {
		// log4j-slf4j-impl-2.1
		exclude module: 'log4j-slf4j-impl'
		}
		// BSON Jackson mapper
		compile 'de.undercouch:bson4jackson:2.7.0'

		compile "ru.nlp_project.story_line2:glr_parser:${STORY_LINE2_GLR_PARSER_VER}"
		compile "ru.nlp_project.story_line2:config:${STORY_LINE2_CONFIG_VER}"
		compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VER}"
		compile "org.mongodb:mongo-java-driver:${MONGO_JAVA_DRIVER_VER}"
		compile "org.elasticsearch.client:rest:${ELASTICSEARCH_CLIENT_TRANSPORT_VER}"
		// Dagger dependencies
		compile "com.google.dagger:dagger:${DAGGER_VER}"
		// Dagger dependencies
		apt "com.google.dagger:dagger-compiler:${DAGGER_VER}"
	}

	apply plugin: 'com.github.johnrengelman.shadow'
	// Include dependent libraries in archive.
	// def mainClassName = "ru.nlp_project.story_line2.crawler.CrawlerApplication"

	shadowJar {
		dependencies {
      		exclude (dependency('org.apache.storm:storm-core'))
			exclude (dependency('org.slf4j:slf4j-api'))
			exclude (dependency('org.slf4j:log4j-over-slf4j'))
			exclude (dependency('ch.qos.logback:logback-classic'))
			exclude (dependency('ch.qos.logback:logback-core'))
			exclude (dependency('org.clojure:clojure'))
			exclude (dependency('org.apache.logging.log4j:log4j-slf4j-impl'))
			exclude (dependency('org.apache.logging.log4j:log4j-core'))
			exclude (dependency('org.apache.logging.log4j:log4j-api'))
			exclude (dependency('javax.servlet:servlet-api'))
			exclude (dependency('com.lmax:disruptor'))
			exclude (dependency('com.esotericsoftware:kryo'))
   		}
		mergeServiceFiles()
	  	manifest {
			attributes 'Description': 'This is an application JAR'
	    	// attributes "Main-Class": "$mainClassName"
	 	}
	}

	build.dependsOn('shadowJar')

	apply plugin: 'maven-publish'
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
				groupId 'ru.nlp_project.story_line2'
            	artifactId artifactId
				version it.version
	            from components.shadow
	        }
	    }
		repositories {
	        maven {
	            credentials {
	                username "deployment"
					password "deployment"
	            }
	            if(project.version.endsWith('-SNAPSHOT')) {
					// publish only RELEASES
					// url "http://repo.nlp-project.ru:8082/nexus/content/repositories/snapshots/"
	            } else {
	                url "http://repo.nlp-project.ru:8082/nexus/content/repositories/releases/"
	            }
	        }
	    }
	} // publishing
}


/*project(':analyser') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
	    compile "org.jsoup:jsoup:${JSOUP_VER}"
        compile "ru.nlp_project.story_line2:glr_parser:${STORY_LINE2_GLR_PARSER_VER}"
        compile 'ru.nlp_project.story_line2:geo:0.1-SNAPSHOT'
    }
}*/

project(':geo') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)
}

project(':crawler') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	// before dependencies with annotation processing
	apply plugin: "net.ltgt.apt"
	dependencies {
		// BSON Jackson mapper
		compile 'de.undercouch:bson4jackson:2.7.0'
		// sheduler enging
		compile 'org.quartz-scheduler:quartz:2.2.3'
		// feed parser
		compile 'com.rometools:rome:1.7.1'
		compile "org.mongodb:mongo-java-driver:${MONGO_JAVA_DRIVER_VER}"
		compile "commons-io:commons-io:${COMMONS_IO_VER}"
	    compile "edu.uci.ics:crawler4j:${CRAWLER4J_VER}"
		compile "io.dropwizard:dropwizard-core:${DROPWIZARD_CORE_VER}"
		compile "com.github.davidb:metrics-influxdb:${DROPWIZARD_METRICS_INFLUXDB_VER}"
		compile "io.dropwizard.metrics:metrics-core:${DROPWIZARD_METRICS_VER}"
		compile "org.codehaus.groovy:groovy:${GROOVY_VER}"
	    compile "org.jsoup:jsoup:${JSOUP_VER}"
		compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VER}"
		// Dagger dependencies
		compile "com.google.dagger:dagger:${DAGGER_VER}"
		// Dagger dependencies
		apt "com.google.dagger:dagger-compiler:${DAGGER_VER}"
	}
	apply plugin: 'com.github.johnrengelman.shadow'

	// Include dependent libraries in archive.
	def mainClassName = "ru.nlp_project.story_line2.crawler.CrawlerApplication"

	shadowJar {
		mergeServiceFiles()
	  	manifest {
			attributes 'Description': 'This is an application JAR'
	    	attributes "Main-Class": "$mainClassName"
	 	}
	}

	build.dependsOn('shadowJar')

	apply plugin: 'maven-publish'
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
				groupId 'ru.nlp_project.story_line2'
            	artifactId artifactId
				version it.version
	            from components.shadow
	        }
	    }
		repositories {
	        maven {
	            credentials {
	                username "deployment"
					password "deployment"
	            }
	            if(project.version.endsWith('-SNAPSHOT')) {
					// publish only RELEASES
					// url "http://repo.nlp-project.ru:8082/nexus/content/repositories/snapshots/"
	            } else {
	                url "http://repo.nlp-project.ru:8082/nexus/content/repositories/releases/"
	            }
	        }
	    }
	} // publishing

}


project(':crawler_scripts') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
		testCompile "org.codehaus.groovy:groovy:${GROOVY_VER}"
	    testCompile "org.jsoup:jsoup:${JSOUP_VER}"
		testCompile "edu.uci.ics:crawler4j:${CRAWLER4J_VER}"
		testCompile "org.jsoup:jsoup:${JSOUP_VER}"
		testCompile "joda-time:joda-time:${JODATIME_VER}"
	}
}



project(':glr_parser_debugger') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
        compile "org.apache.velocity:velocity:${VELOCITY_VER}"
        compile "ru.nlp_project.story_line2:glr_parser:${STORY_LINE2_GLR_PARSER_VER}"
    }
}

project(':glr_parser_testing') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
		compile "org.jsoup:jsoup:${JSOUP_VER}"
		compile "ru.nlp_project.story_line2:glr_parser:${STORY_LINE2_GLR_PARSER_VER}"
    }
}

project(':glr_parser') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	// before dependencies with annotation processing
	apply plugin: "net.ltgt.apt"
	dependencies {
	    compile 'com.beust:jcommander:1.47'
    	compile 'org.antlr:antlr4:4.3'
		compile 'org.apache.commons:commons-collections4:4.1'
		compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VER}"
        compile "ru.nlp_project.story_line2:token:${STORY_LINE2_TOKEN_VER}"
        compile "ru.nlp_project.story_line2:morph:${STORY_LINE2_MORPH_VER}"
		compile "ru.nlp_project.story_line2:config:${STORY_LINE2_CONFIG_VER}"
		// Dagger dependencies
		compile "com.google.dagger:dagger:${DAGGER_VER}"
		// Dagger dependencies
		apt "com.google.dagger:dagger-compiler:${DAGGER_VER}"
    }
}

project(':morph') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)


	dependencies {
//	    compile 'org.codehaus.woodstox:woodstox-core-lgpl:4.4.0'
		compile "commons-io:commons-io:${COMMONS_IO_VER}"
		compile 'net.sf.ehcache:ehcache-core:2.6.10'
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile "com.fasterxml.jackson.core:jackson-core:${JACKSON_VER}"
	}
}

project(':token') {
	javaProject(it)
	javaLogLibrary(it)
	javaTestLibrary(it)

	dependencies {
	    compile "commons-io:commons-io:${COMMONS_IO_VER}"
		compile 'org.apache.commons:commons-lang3:3.3.2'
		compile 'org.apache.opennlp:opennlp-tools:1.5.3'
	}
}

def javaProject(project) {
	project.ext.isJavaProject = true
	project.apply plugin: 'java'
	project.apply plugin: 'eclipse'

	project.repositories {
		mavenCentral()
		mavenLocal()

		maven {
			name "local-snapshots"
			url  "http://repo.nlp-project.ru:8082/nexus/content/repositories/snapshots/"
  		}
		maven {
			name "local-releases"
			url  "http://repo.nlp-project.ru:8082/nexus/content/repositories/releases/"
  		}
		maven {
			name "remote-snapshots"
			url  "http://repo.nlp-project.ru:8082/nexus/content/repositories/snapshots/"
  		}
		maven {
			name "remote-releases"
			url  "http://repo.nlp-project.ru:8082/nexus/content/repositories/releases/"
  		}
    }
}

def javaLogLibrary(project) {
    project.dependencies {
		/*
		Logback-classic module requires the presence of slf4j-api.jar and
		logback-core.jar in addition to logback-classic.jar on the classpath.
		*/
		compile 'org.slf4j:slf4j-api:1.7.22'
		compile 'ch.qos.logback:logback-classic:1.1.8'
    }
}

def javaTestLibrary(project) {
    project.dependencies {
		testCompile "commons-io:commons-io:${COMMONS_IO_VER}"
		testCompile "junit:junit:${TEST_JUNIT_VER}"
		testCompile "org.mockito:mockito-core:${TEST_MOCKITO_VER}"
		testCompile  "org.assertj:assertj-core:${TEST_ASSERTJ_VER}"
    }

}
