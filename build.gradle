apply plugin: 'build-dashboard' // adds "buildDashboard" task

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'http://repo.spring.io/milestone' }
  }

  dependencies {
    // spring-boot
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    // shadow-plugin (http://imperceptiblethoughts.com/shadow/)
    classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    // annotation processor https://plugins.gradle.org/plugin/net.ltgt.apt
    classpath "net.ltgt.gradle:gradle-apt-plugin:0.20"
    // lombok
    classpath "io.franzbecker:gradle-lombok:2.0"
    // scoverage
    // classpath "gradle.plugin.org.scoverage:gradle-scoverage:2.5.0"
    // scalatest plugin https://login.gradle.org/plugin/com.github.maiflai.scalatest
    classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.23"
  }
}

// загрузить properties в зависимости от типа стенда
def loadDockerProperties(type) {
  Properties props = new Properties()
  def name = "${projectDir}/docker-${type}.properties"
  println "Reading docker properties: ${name}"
  if (new File(name).exists()) {
    props.load(new FileInputStream(name))
  } else {
    throw new IllegalStateException("Not found docker properties ${name} file.");
  }
  if (project.ext.stand_type == 'test') {
    props.deploy_dir = props.deploy_dir + "_${System.currentTimeMillis()}"
    props.data_dir = props.deploy_dir + "/data"
    props.logs_dir = props.deploy_dir + "/logs"
  }
  return props;
}

// тип стенда по-умолчанию
// (может быть переопределён параметром к скрипту
// 'gradle -Pstand_type=test')
if (!project.ext.has('stand_type'))
  project.ext.stand_type = 'development'
def props = loadDockerProperties(project.ext.stand_type)
project.ext.stand = props

// configure dependencies
apply from: 'build_scripts/dependencies.gradle'
// apply tasks
apply from: 'build_scripts/build-tasks.gradle'
